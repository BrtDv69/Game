/* Table: PROG_COMPS */

CREATE TABLE PROG_COMPS (
    ID INTEGER NOT NULL,
    ID_PROG INTEGER NOT NULL);





/* Foreign keys definition */

ALTER TABLE PROG_COMPS ADD CONSTRAINT FK_PROG_COMPS FOREIGN KEY (ID) REFERENCES COMPS (ID) ON UPDATE CASCADE;
ALTER TABLE PROG_COMPS ADD CONSTRAINT FK_PROG_COMPS2 FOREIGN KEY (ID_PROG) REFERENCES PROGRAMMS (ID_PROG) ON UPDATE CASCADE;


/* Indices definition */

CREATE UNIQUE INDEX PROG_COMPS_IDX1 ON PROG_COMPS (ID_PROG, ID);
/* Triggers definition */


SET TERM ^ ;





/* Trigger: PROG_COMPS_AD0 */
CREATE TRIGGER PROG_COMPS_AD0 FOR PROG_COMPS
ACTIVE AFTER DELETE POSITION 0
as
begin
 update PROGRAMMS set NUM_OF_COMPS=NUM_OF_COMPS-1
 where ID_PROG=OLD.ID_PROG;
 update COMPS set HASHSUM=gen_id(GEN_PROG_CHANGE,1)
 where ID=OLD.ID;
end
^

/* Trigger: PROG_COMPS_BI0 */
CREATE TRIGGER PROG_COMPS_BI0 FOR PROG_COMPS
ACTIVE AFTER INSERT POSITION 0
as
begin
 update PROGRAMMS set NUM_OF_COMPS=NUM_OF_COMPS+1
 where ID_PROG=NEW.ID_PROG;
 update COMPS set HASHSUM=gen_id(GEN_PROG_CHANGE,1)
 where ID=NEW.ID;
end
^

/* Trigger: PROG_COMPS_BU0 */
CREATE TRIGGER PROG_COMPS_BU0 FOR PROG_COMPS
ACTIVE AFTER UPDATE POSITION 0
as
begin
 update COMPS set HASHSUM=gen_id(GEN_PROG_CHANGE,1)
 where (ID=NEW.ID)or(ID=OLD.ID);
end
^


SET TERM ; ^
