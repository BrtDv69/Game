/* Table: ORDERS */

CREATE TABLE ORDERS (
    ID INTEGER NOT NULL,
    COMP_ID INTEGER NOT NULL,
    TARIFF_ID INTEGER NOT NULL,
    TIME_START TIMESTAMP NOT NULL,
    DATE_START COMPUTED BY (CAST(TIME_START as DATE)),
    TIME_STOP TIMESTAMP NOT NULL,
    PRICE DOUBLE PRECISION NOT NULL,
    COMMENTS VARCHAR(100),
    CHANGE_TIME TIMESTAMP DEFAULT 'now' NOT NULL,
    CHECKED INTEGER,
    INTERFACE VARCHAR(20) NOT NULL,
    LOCKED SMALLINT,
    INTERFACE_INT SMALLINT NOT NULL);





/* Primary keys definition */

ALTER TABLE ORDERS ADD PRIMARY KEY (ID);


/* Foreign keys definition */

ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS FOREIGN KEY (COMP_ID) REFERENCES COMPS (ID) ON UPDATE CASCADE;
ALTER TABLE ORDERS ADD CONSTRAINT FK_ORDERS2 FOREIGN KEY (TARIFF_ID) REFERENCES TARIFFS (ID) ON UPDATE CASCADE;


/* Indices definition */

CREATE INDEX ORDERS_IDX1 ON ORDERS (TIME_START, TIME_STOP);
CREATE INDEX ORDERS_IDX2 ON ORDERS (TIME_START);
CREATE INDEX ORDERS_IDX3 ON ORDERS (TIME_STOP);
/* Triggers definition */


SET TERM ^ ;





/* Trigger: ORDERS_BI0 */
CREATE TRIGGER ORDERS_BI0 FOR ORDERS
ACTIVE BEFORE INSERT POSITION 0
AS 
begin
 update CASH_DESK set AMOUNT=AMOUNT+NEW.PRICE;
end
^

/* Trigger: ORDERS_BU0 */
CREATE TRIGGER ORDERS_BU0 FOR ORDERS
ACTIVE BEFORE UPDATE POSITION 0
AS 
begin
 NEW.CHANGE_TIME = 'now';
 if (OLD.PRICE<>NEW.PRICE) then
  update CASH_DESK set AMOUNT=AMOUNT-OLD.PRICE+NEW.PRICE;
end
^


SET TERM ; ^
